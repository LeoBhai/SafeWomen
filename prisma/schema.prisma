//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("SERVER_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserStatus {
  INVITED
  VERIFIED
}

/// @@allow('all', true)
model TrustedContact {
  id           String   @id() @default(uuid())
  name         String
  phone        String
  relationship String?
  groupType    String?
  userId       String
  user         User?    @relation(fields: [userId], references: [id], name: "user")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Ride {
  id                   String           @id() @default(uuid())
  driverName           String
  vehicleNumber        String
  startLocation        String
  endLocation          String
  estimatedArrivalTime String
  status               String
  userId               String
  user                 User?            @relation(fields: [userId], references: [id], name: "user")
  organizationId       String
  organization         Organization?    @relation(fields: [organizationId], references: [id], name: "organization")
  locationTracks       LocationTrack[]  @relation("ride")
  emergencyAlerts      EmergencyAlert[] @relation("ride")
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @default(now()) @updatedAt()
}

/// @@allow('all', true)
model LocationTrack {
  id        String   @id() @default(uuid())
  latitude  String
  longitude String
  timestamp String
  rideId    String
  ride      Ride?    @relation(fields: [rideId], references: [id], name: "ride")
  userId    String
  user      User?    @relation(fields: [userId], references: [id], name: "user")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model SafetyReport {
  id             String        @id() @default(uuid())
  latitude       String
  longitude      String
  description    String?
  severity       String
  userId         String
  user           User?         @relation(fields: [userId], references: [id], name: "user")
  organizationId String
  organization   Organization? @relation(fields: [organizationId], references: [id], name: "organization")
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now()) @updatedAt()
}

/// @@allow('all', true)
model EmergencyAlert {
  id        String   @id() @default(uuid())
  type      String
  latitude  String
  longitude String
  status    String
  userId    String
  user      User?    @relation(fields: [userId], references: [id], name: "user")
  rideId    String
  ride      Ride?    @relation(fields: [rideId], references: [id], name: "ride")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt()
}

/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('all', roles?[user == auth() && name == 'owner'])
/// @@allow('read', roles?[user == auth()])
model Organization {
  id            String             @id() @default(uuid())
  name          String
  pictureUrl    String?            @default("https://i.imgur.com/BgkFiid.jpeg")
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @default(now()) @updatedAt()
  roles         OrganizationRole[]
  rides         Ride[]             @relation("organization")
  safetyReports SafetyReport[]     @relation("organization")
}

/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('all', organization.roles?[user == auth() && name == 'owner'])
/// @@allow('create', organization.roles?[user == auth()] && name != 'owner')
/// @@allow('read', organization.roles?[user == auth()])
/// @@allow('delete', auth() == user)
model OrganizationRole {
  id             String       @id() @default(uuid())
  name           String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt()
  userId         String
  user           User         @relation(fields: [userId], references: [id])
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

/// @@auth
/// @@allow('all', auth().id == this.id)
/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('create', globalRole != 'ADMIN')
/// @@allow('read', true)
model User {
  id                String             @id() @default(uuid())
  name              String?
  email             String?            @unique()
  pictureUrl        String?            @default("https://i.imgur.com/ZdJSK3Y.jpeg")
  tokenInvitation   String?
  emailVerified     Boolean?
  status            UserStatus         @default(VERIFIED)
  globalRole        String             @default("USER")
  /// @password
  /// @omit
  password          String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @default(now()) @updatedAt()
  accounts          Account[]
  sessions          Session[]
  organizationRoles OrganizationRole[]
  pushNotifications PushNotification[] @relation("user")
  trustedContacts   TrustedContact[]   @relation("user")
  rides             Ride[]             @relation("user")
  locationTracks    LocationTrack[]    @relation("user")
  safetyReports     SafetyReport[]     @relation("user")
  emergencyAlerts   EmergencyAlert[]   @relation("user")
}

/// @@allow('all', true)
model PushNotification {
  id           String   @id() @default(uuid())
  endpoint     String
  subscription String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt()
  userId       String
  user         User     @relation(fields: [userId], references: [id], name: "user")
}

/// @@allow('all', auth().id == user.id)
model Account {
  id                       String  @id() @default(uuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

/// @@allow('all', auth().id == user.id)
model Session {
  id           String   @id() @default(uuid())
  sessionToken String   @unique()
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
